<?xml version="1.0" encoding="UTF-8" standalone="no"?><mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="   http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd   http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd   http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<munit:config name="get-cities-test-suite.xml"/>
	<munit:test description="Test" doc:id="0f3566c6-53da-461f-94ed-bd017cc7d857" name="get-cities-test-suite-get-all-cities-subflow-test">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="api-weather-v1-main" />
			<munit:enable-flow-source value="get:\cities:api-weather-v1-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when doc:id="9630ab53-9d4a-4af3-b998-7539e5f9ae02" doc:name="Mock Weather App Response" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke SOAP Weather App" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="GetCitiesByCountry" attributeName="operation" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('out/mock/get-cities-mock-response.xml')]" mediaType="application/xml" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request method="GET" doc:name="GET /cities" doc:id="2558a2f2-cf0c-4a3c-8c4c-c19d838f62ec" path="cities" config-ref="HTTP_Request_configuration">
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:id="410e1473-c4f1-4173-9a9b-f5b3210c74fb" doc:name="Assert that Status Code is 200" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
			<munit-tools:assert-equals actual="#[payload]" doc:id="655ab393-a602-4d14-8254-b1d5a5b2eb68" doc:name="Assert Payload is as Expected" expected="#[readUrl('classpath://out/get-all-cities-response.json')]"/>
			<munit-tools:verify-call doc:name="Verify call to Log End" doc:id="8f851e57-dc3a-4318-9c6c-644e158218f0" processor="json-logger:logger">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Log End" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b63eec0f-7c56-43d9-8195-fd4426fdc258" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="get-cities-test-suite-get-cities-from-specific-country-subflow-test" doc:id="c07064c9-b6d8-4ce5-8438-4c5152a3a25e">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="api-weather-v1-main" />
			<munit:enable-flow-source value="get:\cities:api-weather-v1-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Weather App Response" doc:id="2b4f4930-b9b7-4e4d-b66e-5c454081ddcb" processor="wsc:consume" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke SOAP Weather App" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="GetCitiesByCountry" attributeName="operation" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('out/mock/get-cities-mock-response.xml')]" mediaType="application/xml" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="GET" doc:name="GET /cities" doc:id="044bde10-c5c8-47c6-9fd6-e3720e666909" config-ref="HTTP_Request_configuration" path="cities" >
				<http:query-params ><![CDATA[#[output application/java
---
{
	"country" : "Australia"
}]]]></http:query-params>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that Status Code is 200" doc:id="cc06a50a-c483-4b21-8382-93fdd3686fe8" expression="#[attributes.statusCode]" is='#[MunitTools::equalTo(200)]' />
			<munit-tools:assert-equals doc:name="Assert Payload is as Expected" doc:id="3694485b-4486-4210-8c41-da42dfc8139b" actual="#[payload]" expected="#[readUrl('classpath://out/get-cities-from-specific-country-response.json')]" />
			<munit-tools:verify-call doc:name="Verify call to Log End" doc:id="61a42c1c-ece0-4025-9bde-a0125b77040c" processor="json-logger:logger" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Log End" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b63eec0f-7c56-43d9-8195-fd4426fdc258" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="get-cities-test-empty-collection-suite-test" doc:id="c35d7ecc-4428-4698-87f2-51d88d603878">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="api-weather-v1-main" />
			<munit:enable-flow-source value="get:\cities:api-weather-v1-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Weather App Response" doc:id="6656e77f-8c77-44b9-b2da-909130195800" processor="wsc:consume" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke SOAP Weather App" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="GetCitiesByCountry" attributeName="operation" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('out/mock/get-cities-empty-collection-mock-response.xml')]" mediaType="application/xml" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="GET" doc:name="GET /cities" doc:id="5fd95c66-8a25-48cd-a9db-5c4ef2b32b2c" config-ref="HTTP_Request_configuration" path="cities" >
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that Status Code is 200" doc:id="1314a36b-286b-44ec-b64f-8446e379316f" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" />
			<munit-tools:assert-equals doc:name="Assert Payload is as Expected" doc:id="023d9509-f2bb-4684-99e4-5ef9a3c1d15c" actual="#[payload]" expected="#[[]]" />
			<munit-tools:verify-call doc:name="Verify call to Log End" doc:id="34744431-91b2-4d4d-921d-335aa9e80bc2" processor="json-logger:logger" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Log End" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b63eec0f-7c56-43d9-8195-fd4426fdc258" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>

</mule>