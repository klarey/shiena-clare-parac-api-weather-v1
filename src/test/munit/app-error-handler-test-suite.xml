<?xml version="1.0" encoding="UTF-8" standalone="no"?><mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd    http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd   http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd   http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="app-error-handler-test-suite.xml"/>
	<munit:test doc:id="f402c29d-e2ec-4385-8f09-37b8b376befd" name="app-error-handler-test-suite-get-cities-default-error-test">
		<munit:behavior>
			<munit-tools:mock-when doc:id="02726ed1-0e55-4f82-9f90-842ae0eddd49" doc:name="Mock when HTTP:NOT_FOUND" processor="wsc:consume">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Invoke SOAP Weather App"/>
					<munit-tools:with-attribute attributeName="doc:id" whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094"/>
					<munit-tools:with-attribute attributeName="operation" whereValue="GetCitiesByCountry"/>
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:NOT_FOUND"/>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:id="5fb185d6-b873-44be-8680-197ac8472ca5" doc:name="Set Event">
				<munit:attributes value="#[{ &quot;queryParams&quot;: {&quot;country&quot;: &quot;Australia&quot;}}]"/>
			</munit:set-event>
			<flow-ref doc:id="6e585366-13d9-4277-9627-e3c838cd4fcf" doc:name="Flow-ref to get-cities-subflow" name="get:\cities:api-weather-v1-config"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:id="e024a572-2a8a-4eb8-b1fa-99384cf2bc49" doc:name="Assert that Status Code is 500" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]"/>
			<munit-tools:assert-equals actual="#[payload]" doc:id="e0c2692e-5fd8-4a17-935b-844bd04329f2" doc:name="Assert Payload is as Expected" expected="#[readUrl('classpath://out/appErrors/default-error-response.json')]"/>
			<munit-tools:verify-call doc:name="Verify call to Set httpStatus" doc:id="e837869d-eae2-4125-b8cc-73696fb1abde" processor="set-variable">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set httpStatus" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="8abab4b6-eee3-41cf-b4cd-98951ea25164" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test doc:id="8445b462-2671-4bee-83a9-2cdef469e4a3" name="app-error-handler-test-suite-get-weather-default-error-test">
		<munit:behavior>
			<munit-tools:mock-when doc:id="e01d9885-329d-496c-b18c-2346c614b70e" doc:name="Mock when HTTP:NOT_FOUND" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke SOAP Weather App" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="GetWeather" attributeName="operation" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:NOT_FOUND"/>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:id="14712077-ca59-4ee8-9530-4c989abfadb8" doc:name="Set Event">
				<munit:attributes value="#[{ &quot;queryParams&quot;: {&quot;country&quot;: &quot;Australia&quot;, &quot;city&quot;: &quot;Archerfield Aerodrome&quot;}}]"/>
			</munit:set-event>
			<flow-ref doc:id="033dfe59-7a2f-45d7-8eae-f2efb8c756ad" doc:name="Flow-ref to get-weather-subflow" name="get:\weather:api-weather-v1-config"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:id="06a6dcc3-a50e-4fc1-8660-3d59eee96699" doc:name="Assert that Status Code is 500" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]"/>
			<munit-tools:assert-equals actual="#[payload]" doc:id="5ec52728-9cc4-4a58-b3ca-48a9fc75120f" doc:name="Assert Payload is as Expected" expected="#[readUrl('classpath://out/appErrors/default-error-response.json')]"/>
			<munit-tools:verify-call doc:name="Verify call to Set httpStatus" doc:id="2716ed91-8e6d-4f0b-b149-20f07c269653" processor="set-variable" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set httpStatus" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="8abab4b6-eee3-41cf-b4cd-98951ea25164" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test doc:id="ccbf931c-7dcf-4a3b-b022-ecd85737d020" name="app-error-handler-test-suite-get-cities-bad-request-invalid-country-error-test" timeOut="120000">
		<munit:behavior>
			<munit-tools:mock-when doc:id="33c5c173-686e-48e6-bbb2-e7e79ce734d6" doc:name="Mock Weather App Response" processor="wsc:consume">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Invoke SOAP Weather App"/>
					<munit-tools:with-attribute attributeName="doc:id" whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094"/>
					<munit-tools:with-attribute attributeName="operation" whereValue="GetCitiesByCountry"/>
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('out/mock/get-cities-mock-response.xml')]" mediaType="application/xml" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:id="bc79db11-b494-40ed-b142-3b76dd268ab4" doc:name="Set Event">
				<munit:attributes value="#[{ &quot;queryParams&quot;: {&quot;country&quot;: &quot;Aaaa&quot;}}]"/>
			</munit:set-event>
			<flow-ref doc:id="333ebd5e-a171-4667-a4e3-82a9dc8a4f25" doc:name="Flow-ref to get-cities-subflow" name="get:\cities:api-weather-v1-config"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:id="8959a104-58d5-4bc9-90d2-9fbe36f6a43e" doc:name="Assert that Status Code is 400" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]"/>
			<munit-tools:assert-that doc:id="f526aea6-59b4-414b-a845-c0d7a523cf06" doc:name="Assert that Error Details has &quot;The specified country does not exist.&quot;" expression="#[payload.error.details]" is="#[MunitTools::containsString(&quot;The specified country does not exist.&quot;)]"/>
			<munit-tools:verify-call doc:name="Verify call to Set httpStatus" doc:id="82f738d9-d212-4977-b232-74944fc905da" processor="set-variable" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set httpStatus" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="8abab4b6-eee3-41cf-b4cd-98951ea25164" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test doc:id="9f7abd0e-8e14-4f92-a136-6c51d201e7e4" name="app-error-handler-test-suite-get-weather-badrequest-invalid-country-error-test">
		<munit:behavior>
			<munit-tools:mock-when doc:id="b89f15f0-ae3e-40de-a32f-b759a42d27ce" doc:name="Mock Weather App Response" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke SOAP Weather App" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="GetWeather" attributeName="operation" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('out/mock/get-weather-mock-response.xml')]" mediaType="application/xml" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:id="41c39af9-0bab-454a-b496-f08b50727e21" doc:name="Set Event">
				<munit:attributes value="#[{ &quot;queryParams&quot;: {&quot;country&quot;: &quot;Aaaa&quot;}}]"/>
			</munit:set-event>
			<flow-ref doc:id="733271ee-d885-4d02-a998-eee15813591d" doc:name="Flow-ref to get-weather-subflow" name="get:\weather:api-weather-v1-config"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:id="808a43aa-ab30-4f2d-b4fc-5f7b2f86bda4" doc:name="Assert that Status Code is 400" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]"/>
			<munit-tools:assert-that doc:id="0bcd0ea1-55e0-41a9-8a96-1896b7ca3b0e" doc:name="Assert that Error Details has &quot;The specified country does not exist.&quot;" expression="#[payload.error.details]" is="#[MunitTools::containsString(&quot;The specified country does not exist.&quot;)]"/>
			<munit-tools:verify-call doc:name="Verify call to Set httpStatus" doc:id="07400722-3be4-46f5-bf61-32f572825380" processor="set-variable" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set httpStatus" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="8abab4b6-eee3-41cf-b4cd-98951ea25164" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test doc:id="3bef27ae-3642-4aec-b6ea-75397e82d478" name="app-error-handler-test-suite-get-weather-badrequest-invalid-city-error-test">
		<munit:behavior>
			<munit-tools:mock-when doc:id="3046b037-481a-4862-ba00-2ca49b3d74bd" doc:name="Mock Weather App Response" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke SOAP Weather App" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="GetWeather" attributeName="operation" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('out/mock/get-weather-mock-response.xml')]" mediaType="application/xml" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:id="6364b3a1-1715-407a-ba3f-5051fed24305" doc:name="Set Event">
				<munit:attributes value="#[{ &quot;queryParams&quot;: {&quot;city&quot;: &quot;Aaaa&quot;}}]"/>
			</munit:set-event>
			<flow-ref doc:id="44ba42e2-6fc2-4291-bace-6041584230b5" doc:name="Flow-ref to get-weather-subflow" name="get:\weather:api-weather-v1-config"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:id="d95c5244-b149-495d-b14f-fc4a690a4190" doc:name="Assert that Status Code is 400" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]"/>
			<munit-tools:assert-that doc:id="927819e9-6657-46ac-8dfc-2ecf8373b685" doc:name="Assert that Error Details has &quot;The specified city does not exist.&quot;" expression="#[payload.error.details]" is="#[MunitTools::containsString(&quot;The specified city does not exist.&quot;)]"/>
			<munit-tools:verify-call doc:name="Verify call to Set httpStatus" doc:id="30333a2c-98f9-4fe7-a6f9-203a128fc697" processor="set-variable" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set httpStatus" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="8abab4b6-eee3-41cf-b4cd-98951ea25164" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test doc:id="35ee1a2e-f46d-4a8e-926f-feaf5e2dba09" name="app-error-handler-test-suite-get-weather-badrequest-city-does-not-exist-in-country-error-test">
		<munit:behavior>
			<munit-tools:mock-when doc:id="55c483c0-d63e-4b21-8df1-10da3e956a20" doc:name="Mock Weather App Response" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke SOAP Weather App" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="GetWeather" attributeName="operation" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('out/mock/get-weather-mock-response.xml')]" mediaType="application/xml" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:id="165401f3-ddaf-46c3-8a13-e1fcf14b140e" doc:name="Set Event">
				<munit:attributes value="#[{ &quot;queryParams&quot;: {&quot;city&quot;: &quot;Aaaa&quot;, &quot;country&quot;: &quot;Australia&quot;}}]"/>
			</munit:set-event>
			<flow-ref doc:id="a2365866-763d-4f45-b136-810b297fcb74" doc:name="Flow-ref to get-weather-subflow" name="get:\weather:api-weather-v1-config"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:id="a9eee72f-857c-4825-ae9e-1483fcb1c5e8" doc:name="Assert that Status Code is 400" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]"/>
			<munit-tools:assert-that doc:id="f759000f-c031-47e9-b8fe-dae5873f4fee" doc:name="Assert that Error Details has &quot;The specified city does not exist in the given country&quot;" expression="#[payload.error.details]" is="#[MunitTools::containsString(&quot;The specified city does not exist in the given country&quot;)]"/>
			<munit-tools:verify-call doc:name="Verify call to Set httpStatus" doc:id="eb93a7b7-74b3-4157-ae79-827acd7ad015" processor="set-variable" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set httpStatus" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="8abab4b6-eee3-41cf-b4cd-98951ea25164" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="app-error-handler-test-suite-get-weather-badrequest-country-does-not-exist-error-test" doc:id="fdb1539f-05a4-49bb-b303-46f17590152b" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Weather App Response" doc:id="13a4cc39-0dc6-4605-b6fa-cf40b09c0af6" processor="wsc:consume" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Invoke SOAP Weather App" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="b2a73061-714a-4bd0-878a-f6b8d8e25094" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="GetWeather" attributeName="operation" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('out/mock/get-weather-mock-response.xml')]" mediaType="application/xml" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Event" doc:id="00ed0107-9152-422e-9eb9-b258713e4b05" >
				<munit:attributes value='#[{ "queryParams": {"city": "Melbourne", "country": "Aaa"}}]' />
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to get-weather-subflow" doc:id="38887d25-d540-4b1c-87c1-cac9f89ad86e" name="get:\weather:api-weather-v1-config" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that Status Code is 400" doc:id="757390a6-56c7-470c-be95-a84a10cb2bee" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" />
			<munit-tools:assert-that doc:name='Assert that Error Details has "The specified country does not exist"' doc:id="f209f022-4478-4f09-90ef-872e1aaf9401" expression="#[payload.error.details]" is='#[MunitTools::containsString("The specified country does not exist")]' />
			<munit-tools:verify-call doc:name="Verify call to Set httpStatus" doc:id="b71321ae-5d90-4333-b8c0-a05c54ef20fb" processor="set-variable" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set httpStatus" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="8abab4b6-eee3-41cf-b4cd-98951ea25164" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
</mule>